# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  
  INVENTORY = "playbooks/hosts"
  PLAYBOOK = "playbooks/site.yml"  
    
  config.vm.define "centosdb", primary: true do |config|  
    config.vm.box_check_update = false   
    config.vm.box = "generic/centos9s"
    config.vm.boot_timeout = 1800
    config.vm.communicator = :ssh
    config.vm.guest = :linux
    
    config.vm.synced_folder './', '/vagrant', disabled: true
    
    config.ssh.insert_key = false
  
    # https://sanbarrow.com/vmx/vmx-network-advanced.html
  
    ["vmware_desktop"].each do |provider|
      config.vm.provider provider do |v|
         v.allowlist_verified = :disable_warning
         v.enable_vmrun_ip_lookup = true
         v.unmount_default_hgfs = true
         # v.whitelist_verified = true
         
         # required by vmx network-settings on startup ??
         v.gui = true
      
         v.vmx["cpuid.coresPerSocket"] = "1"
         v.vmx["memsize"] = "2048"
         v.vmx["numvcpus"] = "2"
         v.vmx["floppy0.present"] = "false"
		 
		 # v.vmx["svga.autodetect"] = "false"
		 # v.vmx["svga.maxWidth"] = "2560"
		 # v.vmx["svga.maxHeight"] = "2048"
		 # v.vmx["svga.vramSize"] = "20971520"
		 # v.vmx["svga.numDisplays"] = "1"
      
         v.vmx["ethernet0.present"] = "true"
         v.vmx["ethernet0.connectionType"] = "custom"
         v.vmx["ethernet0.addressType"] = "static"
         v.vmx["ethernet0.address"] = "00:50:56:2a:c6:7b"
         v.vmx["ethernet0.vnet"] = "vmnet1"
         v.vmx["ethernet0.displayName"] = "VMnet1"
         v.vmx["ethernet0.virtualDev"] = "e1000"
         end
      end
    end  
    
	# vagrant on linux system:
    # manual [explicit] usage: vagrant provision
    config.vm.provision "ansible" do |ansible|
       ansible.playbook = PLAYBOOK
       ansible.inventory_path = INVENTORY
       ansible.skip_tags = ["ping","pkgupgrade","test"]
       end
       
    # manual [explicit] usage: vagrant provision --provision-with ping
    config.vm.provision "ping", type: "ansible", run: "never" do |ansible|
        ansible.playbook = PLAYBOOK
        ansible.inventory_path = INVENTORY
        ansible.tags = ["ping"]
        end
  end
